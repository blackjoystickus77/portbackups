--Little cosmetic World Map Feature I wanted to add for the lulz and because i felt like it, I checked the Arena mod for reference. with a bit of custom HUD sprinkled ontop.

-------------------------------------------- Constants ------------------------------------------

MAP_MODEL = smlua_model_util_get_id("map_geo")       
MAP_FORWARD_OFFSET = 100          
MAP_Y_OFFSET = 50               
local mapTexture = get_texture_info("mapfinal")
local life_icons = {
    [CT_MARIO]   = gTextures.mario_head,
    [CT_LUIGI]   = gTextures.luigi_head,
    [CT_TOAD]    = gTextures.toad_head,
    [CT_WALUIGI] = gTextures.waluigi_head,
    [CT_WARIO]   = gTextures.wario_head,
}

-------------------------------------------- For Char Select Icons ------------------------------------------

local charSelectOn = false
hook_event(HOOK_ON_MODS_LOADED, function()
    if _G.charSelectExists then
        charSelectOn = true
    end
end)

-------------------------------------------- where the stupid little icon will be in each area, yes i also added this to make the map look NICER. because NICER is BETTERer, ER ------------------------------------------
local levelMapCoords = {
    [LEVEL_CASTLE_GROUNDS] = { x = 0.282, y = 0.587 },
    [LEVEL_CASTLE]         = { x = 0.282, y = 0.473 },
    [LEVEL_CASTLE_COURTYARD] = { x = 0.282, y = 0.473 },
    [LEVEL_BOB]            = { x = 0.282, y = 0.689 },
    [LEVEL_WF]             = { x = 0.375, y = 0.477 },
    [LEVEL_JRB]            = { x = 0.282, y = 0.305 },
    [LEVEL_CCM]            = { x = 0.752, y = 0.388 },
    [LEVEL_BBH]            = { x = 0.658, y = 0.679 },
    [LEVEL_HMC]            = { x = 0.562, y = 0.587 },
    [LEVEL_LLL]            = { x = 0.658, y = 0.112 },
    [LEVEL_SSL]            = { x = 0.375, y = 0.112 },
    [LEVEL_DDD]            = { x = 0.375, y = 0.587 },
    [LEVEL_SL]             = { x = 0.469, y = 0.587 },
    [LEVEL_WDW]            = { x = 0.562, y = 0.477 },
    [LEVEL_TTM]            = { x = 0.375, y = 0.305 },
    [LEVEL_THI]            = { x = 0.752, y = 0.679 },
    [LEVEL_TTC]            = { x = 0.469, y = 0.112 },
    [LEVEL_RR]             = { x = 0.562, y = 0.305 },
    [LEVEL_PSS]            = { x = 0.282, y = 0.856 },
    [LEVEL_SA]             = { x = 0.282, y = 0.473 },
    [LEVEL_WMOTR]          = { x = 0.469, y = 0.388 },
    [LEVEL_TOTWC]          = { x = 0.562, y = 0.856 },
    [LEVEL_VCUTM]          = { x = 0.658, y = 0.587 },
    [LEVEL_COTMC]          = { x = 0.282, y = 0.112 },
    [LEVEL_ENDING]         = { x = 0.422, y = 0.856 },
    [LEVEL_BITDW]          = { x = 0.752, y = 0.587 },
    [LEVEL_BITFS]          = { x = 0.562, y = 0.112 },
    [LEVEL_BITS]           = { x = 0.752, y = 0.856 },
    [LEVEL_BOWSER_3]       = { x = 0.752, y = 0.856 },
    [LEVEL_BOWSER_1]       = { x = 0.752, y = 0.305 },
    [LEVEL_BOWSER_2]       = { x = 0.752, y = 0.112 },
}

-------------------------------------------- This is so you can move the camera around with the map open cause it was getting on my nerves how quickly it closed. ------------------------------------------

local CAMERA_BUTTONS = U_CBUTTONS | D_CBUTTONS | L_CBUTTONS | R_CBUTTONS | R_TRIG 

-------------------------------------------- Active Player Check ------------------------------------------
function active_player(m)
    local np = gNetworkPlayers[m.playerIndex]
    if m.playerIndex == 0 then
        return true
    end
    if not np.connected then
        return false
    end
    return is_player_active(m)
end


-------------------------------------------- per-player state ------------------------------------------
gPlayerSyncTable = gPlayerSyncTable or {}
for i = 0, (MAX_PLAYERS - 1) do
    gPlayerSyncTable[i].mapOpen = false
end

-------------------------------------------- custom object fields i didnt know this was possible ------------------------------------------
define_custom_obj_fields({
    oMapOwner = 'u32',
})

-------------------------------------------- map init ------------------------------------------
function bhv_map_init(obj)
    obj.oFlags = OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE
    obj.oOpacity = 255
    cur_obj_hide()
    obj_scale(obj, 1.0)
end

-------------------------------------------- map loop ------------------------------------------
function bhv_map_loop(obj)
    local m = gMarioStates[obj.oMapOwner]
    local s = gPlayerSyncTable[obj.oMapOwner]

    if not active_player(m) then
        cur_obj_hide()
        return
    end

    if not s.mapOpen then
        cur_obj_hide()
        return
    end

    -- show and set model if hidden
    if obj_is_hidden(obj) ~= 0 then
        cur_obj_unhide()
        obj_set_model_extended(obj, MAP_MODEL)
    end

-- position of both hands

local handR = {
    x = get_hand_foot_pos_x(m, 0),
    y = get_hand_foot_pos_y(m, 0),
    z = get_hand_foot_pos_z(m, 0),
}
local handL = {
    x = get_hand_foot_pos_x(m, 1),
    y = get_hand_foot_pos_y(m, 1),
    z = get_hand_foot_pos_z(m, 1),
}

-- center point between both hands
local baseX = (handR.x + handL.x) / 2
local baseY = (handR.y + handL.y) / 2
local baseZ = (handR.z + handL.z) / 2

-- forward offset so itâ€™s slightly in front of Mario
local angle_rad = sm64_to_radians(m.faceAngle.y)
local distance = 40
obj.oPosX = baseX + distance * math.sin(angle_rad)
obj.oPosZ = baseZ + distance * math.cos(angle_rad)
obj.oPosY = baseY + 20  -- small lift so it's above the hands a bit


    -- rotation and scale
    obj.oFaceAngleYaw  = m.faceAngle.y - 0x4000
    obj.oFaceAnglePitch = 0
    obj.oFaceAngleRoll  = 0x2000

    obj.header.gfx.scale.x = 0.3
    obj.header.gfx.scale.y = 0.3
    obj.header.gfx.scale.z = 0.3

    -- sync to gfx
    obj.header.gfx.pos.x = obj.oPosX
    obj.header.gfx.pos.y = obj.oPosY
    obj.header.gfx.pos.z = obj.oPosZ
end

-------------------------------------------- Register behavior ------------------------------------------

id_bhvMap = hook_behavior(nil, OBJ_LIST_DEFAULT, true, bhv_map_init, bhv_map_loop)

-------------------------------------------- Per-level spawn ------------------------------------------

function on_level_init()
    for i = 0, (MAX_PLAYERS - 1) do
        spawn_non_sync_object(id_bhvMap, E_MODEL_NONE, 0, 0, 0, function(obj)
            obj.oMapOwner = i
        end)
    end
end

hook_event(HOOK_ON_LEVEL_INIT, on_level_init)

-------------------------- Welcome Text -----------------------------------------------

--"Steal this from Flood Expanded" - birdekek

local wm_timer = 0

local function display_welcome_message()
    djui_chat_message_create("Welcome to the \\#00c0fd\\Openworld Quest!\n\\#ffffdc\\----------------------------------------------\nIf you ever get lost, type \\#00c0fd\\/world-map\\#ffffdc\\ to bring up your navigation map.")
end

local function welcome_message(m)
    if wm_timer then
        wm_timer = wm_timer + 1

        if wm_timer >= 25 then

                display_welcome_message()

            wm_timer = nil
        end
    end
end

hook_event(HOOK_UPDATE, welcome_message)


-------------------------- Chat Command Hook ------------------------------------------

hook_chat_command("world-map", "Shows the world navigation map.", function(msg, sender)
    if sender == network_local_index then
        local m = gMarioStates[0]
        local s = gPlayerSyncTable[m.playerIndex]
		
		--NO USING MAP ON SWIMMING YOU'LL RUIN IT WILL GET DRENCHED AND SOAKED
		
		if (m.action & ACT_GROUP_MASK) == ACT_GROUP_SUBMERGED then
            djui_chat_message_create("You can't read the map while swimming! It'll get all wet and stuff.")
			play_sound(SOUND_MENU_CAMERA_BUZZ, m.pos)
            return true
        end
		
		if (m.action & ACT_GROUP_MASK) == ACT_GROUP_MOVING then
            djui_chat_message_create("Halt! You may only read the map while standing still.")
			play_sound(SOUND_MENU_CAMERA_BUZZ, m.pos)
            return true
        end

        -- Hey buddy ever heard of don't text while driving?
        if (m.action & ACT_FLAG_BUTT_OR_STOMACH_SLIDE) ~= 0 then
            djui_chat_message_create("You can't read the map while sliding! You'll trip!")
            play_sound(SOUND_MENU_CAMERA_BUZZ, m.pos)
            return true
        end
		
		

        if not s.mapOpen then
            -- open the map
            s.mapOpen = true
            set_mario_action(m, ACT_READING_MAP, 0)
			play_sound(SOUND_MENU_CLICK_FILE_SELECT, m.pos)
        end
    end
	return true
end)

----------------- Input hook for closing the map ------------------------------------

function mario_update(m)
    if m.playerIndex == 0 then
        local s = gPlayerSyncTable[m.playerIndex]

        if s.mapOpen then
            local pressed = m.controller.buttonPressed
			
			if is_game_paused() then
                s.mapOpen = false
                set_mario_action(m, ACT_IDLE, 0)
                m.marioObj.oIntangibleTimer = 0
                set_character_anim_with_accel(m, CHAR_ANIM_STOP_REACH_POCKET, 0)
                play_sound(SOUND_MENU_CLICK_FILE_SELECT, m.pos)
                return -- Pause Check
            end
			

            -- close map on any button EXCEPT camera controls
            if pressed ~= 0 and (pressed & CAMERA_BUTTONS) == 0 then
                s.mapOpen = false
                set_mario_action(m, ACT_IDLE, 0)
                m.marioObj.oIntangibleTimer = 0
                set_character_anim_with_accel(m, CHAR_ANIM_STOP_REACH_POCKET, 0)
				play_sound(SOUND_MENU_CLICK_FILE_SELECT, m.pos)
            end
        end
    end
end

hook_event(HOOK_MARIO_UPDATE, mario_update)


-------------------------------------------------------------------------------------
----------------------------MAP IMAGE LOGIC------------------------------------------
-------------------------------------------------------------------------------------

-- For The Map Image
function on_hud_render()
    local m = gMarioStates[0]
    local s = gPlayerSyncTable[m.playerIndex]

    -- only draw if map is open and player is reading
    if not s.mapOpen or m.action ~= ACT_READING_MAP then return end

    local screenW = djui_hud_get_screen_width()
    local screenH = djui_hud_get_screen_height()

    -- dark background overlay
    djui_hud_set_resolution(RESOLUTION_DJUI)
    djui_hud_set_color(0, 0, 0, 150) -- overlay color
    djui_hud_render_rect(0, 0, screenW, screenH)

    local aspect = 512 / 256

    -- width-based shit
    local maxW = screenW * 0.8
    local hFromW = maxW / aspect

    -- height-based shit
    local maxH = screenH * 0.8
    local wFromH = maxH * aspect

    -- pick the smaller scale to ensure it fits both width & height
    local targetW, targetH
    if hFromW <= maxH then
        targetW = maxW
        targetH = hFromW
    else
        targetW = wFromH
        targetH = maxH
    end

    -- center map
    local x = (screenW - targetW) / 2
    local y = (screenH - targetH) / 2

    djui_hud_set_color(255, 255, 255, 255)
    djui_hud_render_texture(mapTexture, x, y, targetW / 512, targetH / 256)
	
-- bottom message
    local msg = "PRESS ANY BUTTON TO CLOSE MAP"

    local baseW, baseH = 1920, 1080
    local scaleW = screenW / baseW
    local scaleH = screenH / baseH
    local scale = 3 * math.min(scaleW, scaleH)

    local textW = djui_hud_measure_text(msg) * scale
	local textH = djui_hud_measure_text("A") * scale -- Just a trick to scale shit up
    local textX = (screenW - textW) / 2
    local textY = y + targetH + (textH * 1.5)

    djui_hud_set_font(FONT_HUD)
    djui_hud_print_text(msg, textX, textY, scale)
	
	
     -- get current level coords
    local np = gNetworkPlayers[0]
    local coords = levelMapCoords[np.currLevelNum]
    if coords ~= nil then

        -- scale icon relative to map width, getting this right is a bit obnoxious
        local iconSize = targetW * 0.04 -- 5% of map width
        local scaleFactor = iconSize / 16 -- 16px base size of the texture

        local iconX = x + (coords.x * targetW) - (iconSize / 2)
        local iconY = y + (coords.y * targetH) - (iconSize / 2)

        if charSelectOn then
    _G.charSelect.character_render_life_icon(m.playerIndex, iconX, iconY, scaleFactor)
else
    djui_hud_render_texture(
        life_icons[gMarioStates[0].character.type] or gTextures.mario_head,
        iconX, iconY,
        scaleFactor, scaleFactor
    )
end
    end
	
end

hook_event(HOOK_ON_HUD_RENDER, on_hud_render)


-------------------------------------------- Reading Map Animation ------------------------------------------

smlua_anim_util_register_animation('reading_map',0, 0, 0, 0, 60, { 
	0x0000, 0x00AA, 0x0000, 0x0000, 0x3FFF, 0x0000, 0xFFFF, 0x0000, 0x40A1, 
	0xFF2F, 0xFF2F, 0xFF2F, 0xFF2F, 0xFF2F, 0xFF2F, 0xFF2F, 0xFF2F, 0xFF2F, 
	0xFF2F, 0xFF2F, 0xFF2F, 0xFF2E, 0xFF2E, 0xFF2E, 0xFF2E, 0xFF2E, 0xFF2F, 
	0xFE0D, 0xFF4E, 0xFF58, 0xFF76, 0xFFA4, 0xFFDE, 0x0023, 0x006D, 0x00BA, 
	0x0108, 0x0152, 0x0196, 0x01D0, 0x01FE, 0x021B, 0x0226, 0x021E, 0x0208, 
	0x01E5, 0x01B9, 0x0185, 0x014C, 0x010F, 0x00D1, 0x0094, 0x005B, 0x0027, 
	0xFFF9, 0xFFD7, 0xFFC1, 0xFFB9, 0xFFBE, 0xFFCB, 0xFFE1, 0xFFFD, 0x001F, 
	0x0043, 0x006A, 0x0093, 0x00BB, 0x00E3, 0x0107, 0x0128, 0x0144, 0x0159, 
	0x0167, 0x016C, 0x0165, 0x0152, 0x0134, 0x010D, 0x00E0, 0x00AE, 0x0079, 
	0x0042, 0x000D, 0xFFDA, 0xFFAD, 0xFF86, 0xFF68, 0xFF55, 0xFF4E, 0x0000, 
	0xFFCF, 0xFF49, 0xFE7B, 0xFD73, 0xFC40, 0xFAF1, 0xF993, 0xF835, 0xF6E6, 
	0xF5B3, 0xF4AB, 0xF3DD, 0xF357, 0xF327, 0xF33F, 0xF383, 0xF3F1, 0xF484, 
	0xF537, 0xF607, 0xF6F1, 0xF7EF, 0xF8FE, 0xFA1A, 0xFB3E, 0xFC68, 0xFD92, 
	0xFEBA, 0xFFDA, 0x00F0, 0x01FA, 0x02F7, 0x03E6, 0x04C6, 0x0598, 0x0659, 
	0x070A, 0x07A8, 0x0835, 0x08AE, 0x0912, 0x0962, 0x099C, 0x09C0, 0x09CC, 
	0x09AC, 0x0952, 0x08C7, 0x0814, 0x0741, 0x0659, 0x0563, 0x0469, 0x0373, 
	0x028A, 0x01B8, 0x0105, 0x007A, 0x0020, 0x0000, 0xFFFF, 0x000E, 0x0033, 
	0x006D, 0x00B8, 0x010E, 0x016D, 0x01CF, 0x0232, 0x0290, 0x02E7, 0x0331, 
	0x036B, 0x0391, 0x039E, 0x0398, 0x0384, 0x0366, 0x033E, 0x030C, 0x02D2, 
	0x0292, 0x024B, 0x0200, 0x01B2, 0x0161, 0x010F, 0x00BC, 0x006B, 0x001B, 
	0xFFCD, 0xFF84, 0xFF3F, 0xFEFD, 0xFEBF, 0xFE85, 0xFE50, 0xFE1F, 0xFDF4, 
	0xFDCD, 0xFDAC, 0xFD90, 0xFD7A, 0xFD6B, 0xFD61, 0xFD5E, 0xFD66, 0xFD7E, 
	0xFDA4, 0xFDD4, 0xFE0C, 0xFE4B, 0xFE8D, 0xFED0, 0xFF12, 0xFF50, 0xFF89, 
	0xFFB9, 0xFFDE, 0xFFF6, 0xFFFF, 0x0B12, 0x0B0E, 0x0B05, 0x0AF6, 0x0AE1, 
	0x0AC8, 0x0AAB, 0x0A8A, 0x0A65, 0x0A3E, 0x0A15, 0x09E9, 0x09BD, 0x098F, 
	0x0961, 0x0933, 0x0906, 0x08DA, 0x08AE, 0x0885, 0x085E, 0x0839, 0x0817, 
	0x07F8, 0x07DD, 0x07C5, 0x07B3, 0x07A5, 0x079C, 0x0799, 0x07A4, 0x07C1, 
	0x07EF, 0x082A, 0x0870, 0x08BF, 0x0912, 0x0969, 0x09BF, 0x0A13, 0x0A61, 
	0x0AA7, 0x0AE3, 0x0B10, 0x0B2E, 0x0B38, 0x0B38, 0x0B36, 0x0B34, 0x0B31, 
	0x0B2E, 0x0B2A, 0x0B27, 0x0B23, 0x0B1F, 0x0B1C, 0x0B18, 0x0B16, 0x0B13, 
	0x0B12, 0xFFFE, 0x0001, 0xC170, 0xFF88, 0xFF89, 0xFF8A, 0xFF8B, 0xFF8D, 
	0xFF90, 0xFF92, 0xFF95, 0xFF98, 0xFF9B, 0xFF9D, 0xFF9F, 0xFFA1, 0xFFA2, 
	0xFFA2, 0xFFA2, 0xFFA1, 0xFF9F, 0xFF9E, 0xFF9B, 0xFF99, 0xFF97, 0xFF94, 
	0xFF91, 0xFF8F, 0xFF8D, 0xFF8B, 0xFF8A, 0xFF89, 0xFF88, 0xFF89, 0xFF89, 
	0xFF8B, 0xFF8C, 0xFF8E, 0xFF91, 0xFF93, 0xFF95, 0xFF98, 0xFF9A, 0xFF9C, 
	0xFF9E, 0xFFA0, 0xFFA1, 0xFFA2, 0xFFA2, 0xFFA2, 0xFFA1, 0xFF9F, 0xFF9E, 
	0xFF9B, 0xFF99, 0xFF97, 0xFF94, 0xFF91, 0xFF8F, 0xFF8D, 0xFF8B, 0xFF8A, 
	0xFF89, 0xFF88, 0xFFE2, 0xFFE2, 0xFFE3, 0xFFE3, 0xFFE3, 0xFFE4, 0xFFE4, 
	0xFFE4, 0xFFE5, 0xFFE5, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE7, 0xFFE6, 
	0xFFE6, 0xFFE6, 0xFFE6, 0xFFE5, 0xFFE5, 0xFFE5, 0xFFE4, 0xFFE4, 0xFFE3, 
	0xFFE3, 0xFFE3, 0xFFE3, 0xFFE2, 0xFFE2, 0xFFE2, 0xFFE2, 0xFFE3, 0xFFE3, 
	0xFFE3, 0xFFE4, 0xFFE4, 0xFFE4, 0xFFE5, 0xFFE5, 0xFFE6, 0xFFE6, 0xFFE6, 
	0xFFE6, 0xFFE6, 0xFFE7, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE5, 0xFFE5, 
	0xFFE5, 0xFFE4, 0xFFE4, 0xFFE3, 0xFFE3, 0xFFE3, 0xFFE3, 0xFFE2, 0xA8C9, 
	0xA8C1, 0xA8AD, 0xA88D, 0xA865, 0xA835, 0xA802, 0xA7CC, 0xA796, 0xA763, 
	0xA734, 0xA70B, 0xA6EC, 0xA6D7, 0xA6D0, 0xA6D6, 0xA6E8, 0xA704, 0xA728, 
	0xA753, 0xA781, 0xA7B3, 0xA7E5, 0xA817, 0xA846, 0xA870, 0xA894, 0xA8B0, 
	0xA8C2, 0xA8C9, 0xA8C3, 0xA8B3, 0xA89A, 0xA87A, 0xA854, 0xA829, 0xA7FB, 
	0xA7CC, 0xA79D, 0xA770, 0xA745, 0xA71F, 0xA6FE, 0xA6E5, 0xA6D5, 0xA6D0, 
	0xA6D6, 0xA6E8, 0xA704, 0xA728, 0xA753, 0xA781, 0xA7B3, 0xA7E5, 0xA817, 
	0xA846, 0xA870, 0xA894, 0xA8B0, 0xA8C2, 0xA8C9, 0xFFFF, 0xFFFF, 0x0000, 
	0x0001, 0x0001, 0x0002, 0x0003, 0x0003, 0x0004, 0x0005, 0x0005, 0x0006, 
	0x0006, 0x0007, 0x0007, 0x0007, 0x0006, 0x0006, 0x0006, 0x0005, 0x0004, 
	0x0004, 0x0003, 0x0002, 0x0002, 0x0001, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
	0xFFFF, 0x0000, 0x0000, 0x0001, 0x0001, 0x0002, 0x0003, 0x0003, 0x0004, 
	0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 0x0007, 0x0007, 0x0007, 0x0006, 
	0x0006, 0x0006, 0x0005, 0x0004, 0x0004, 0x0003, 0x0002, 0x0002, 0x0001, 
	0x0000, 0x0000, 0xFFFF, 0x0001, 0x0001, 0x0001, 0x0002, 0x0003, 0x0004, 
	0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000D, 
	0x000D, 0x000C, 0x000C, 0x000B, 0x000A, 0x0009, 0x0007, 0x0006, 0x0005, 
	0x0004, 0x0003, 0x0002, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0002, 
	0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 
	0x000C, 0x000C, 0x000D, 0x000D, 0x000D, 0x000C, 0x000C, 0x000B, 0x000A, 
	0x0009, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0xE4FD, 
	0xE4F9, 0xE4EE, 0xE4DE, 0xE4C8, 0xE4AF, 0xE493, 0xE476, 0xE45A, 0xE43E, 
	0xE425, 0xE40F, 0xE3FE, 0xE3F3, 0xE3EF, 0xE3F3, 0xE3FD, 0xE40C, 0xE41F, 
	0xE435, 0xE44E, 0xE469, 0xE484, 0xE49E, 0xE4B7, 0xE4CE, 0xE4E1, 0xE4F0, 
	0xE4FA, 0xE4FD, 0xE4FA, 0xE4F2, 0xE4E4, 0xE4D3, 0xE4BF, 0xE4A8, 0xE490, 
	0xE476, 0xE45D, 0xE445, 0xE42E, 0xE41A, 0xE408, 0xE3FB, 0xE3F2, 0xE3EF, 
	0xE3F3, 0xE3FD, 0xE40C, 0xE41F, 0xE435, 0xE44E, 0xE469, 0xE484, 0xE49E, 
	0xE4B7, 0xE4CE, 0xE4E1, 0xE4F0, 0xE4FA, 0xE4FD, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
	0xFFFF, 0xFFFF, 0x0000, 0xF97B, 0xED8B, 0xFFFE, 0x0001, 0xC170, 0xFF88, 
	0xFF89, 0xFF8A, 0xFF8B, 0xFF8D, 0xFF90, 0xFF92, 0xFF95, 0xFF98, 0xFF9B, 
	0xFF9D, 0xFF9F, 0xFFA1, 0xFFA2, 0xFFA2, 0xFFA2, 0xFFA1, 0xFF9F, 0xFF9E, 
	0xFF9B, 0xFF99, 0xFF97, 0xFF94, 0xFF91, 0xFF8F, 0xFF8D, 0xFF8B, 0xFF8A, 
	0xFF89, 0xFF88, 0xFF89, 0xFF89, 0xFF8B, 0xFF8C, 0xFF8E, 0xFF91, 0xFF93, 
	0xFF95, 0xFF98, 0xFF9A, 0xFF9C, 0xFF9E, 0xFFA0, 0xFFA1, 0xFFA2, 0xFFA2, 
	0xFFA2, 0xFFA1, 0xFF9F, 0xFF9E, 0xFF9B, 0xFF99, 0xFF97, 0xFF94, 0xFF91, 
	0xFF8F, 0xFF8D, 0xFF8B, 0xFF8A, 0xFF89, 0xFF88, 0xFFE2, 0xFFE2, 0xFFE3, 
	0xFFE3, 0xFFE3, 0xFFE4, 0xFFE4, 0xFFE4, 0xFFE5, 0xFFE5, 0xFFE6, 0xFFE6, 
	0xFFE6, 0xFFE6, 0xFFE7, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE5, 0xFFE5, 
	0xFFE5, 0xFFE4, 0xFFE4, 0xFFE3, 0xFFE3, 0xFFE3, 0xFFE3, 0xFFE2, 0xFFE2, 
	0xFFE2, 0xFFE2, 0xFFE3, 0xFFE3, 0xFFE3, 0xFFE4, 0xFFE4, 0xFFE4, 0xFFE5, 
	0xFFE5, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE6, 0xFFE7, 0xFFE6, 0xFFE6, 
	0xFFE6, 0xFFE6, 0xFFE5, 0xFFE5, 0xFFE5, 0xFFE4, 0xFFE4, 0xFFE3, 0xFFE3, 
	0xFFE3, 0xFFE3, 0xFFE2, 0xA8C9, 0xA8C1, 0xA8AD, 0xA88D, 0xA865, 0xA835, 
	0xA802, 0xA7CC, 0xA796, 0xA763, 0xA734, 0xA70B, 0xA6EC, 0xA6D7, 0xA6D0, 
	0xA6D6, 0xA6E8, 0xA704, 0xA728, 0xA753, 0xA781, 0xA7B3, 0xA7E5, 0xA817, 
	0xA846, 0xA870, 0xA894, 0xA8B0, 0xA8C2, 0xA8C9, 0xA8C3, 0xA8B3, 0xA89A, 
	0xA87A, 0xA854, 0xA829, 0xA7FB, 0xA7CC, 0xA79D, 0xA770, 0xA745, 0xA71F, 
	0xA6FE, 0xA6E5, 0xA6D5, 0xA6D0, 0xA6D6, 0xA6E8, 0xA704, 0xA728, 0xA753, 
	0xA781, 0xA7B3, 0xA7E5, 0xA817, 0xA846, 0xA870, 0xA894, 0xA8B0, 0xA8C2, 
	0xA8C9, 0xFFFF, 0xFFFF, 0x0000, 0x0001, 0x0001, 0x0002, 0x0003, 0x0003, 
	0x0004, 0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 0x0007, 0x0007, 0x0007, 
	0x0006, 0x0006, 0x0005, 0x0004, 0x0004, 0x0003, 0x0002, 0x0002, 0x0001, 
	0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0001, 0x0001, 
	0x0002, 0x0003, 0x0003, 0x0004, 0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 
	0x0007, 0x0007, 0x0007, 0x0007, 0x0006, 0x0006, 0x0005, 0x0004, 0x0004, 
	0x0003, 0x0002, 0x0002, 0x0001, 0x0000, 0x0000, 0xFFFF, 0x0001, 0x0001, 
	0x0001, 0x0002, 0x0003, 0x0004, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 
	0x000B, 0x000C, 0x000D, 0x000D, 0x000D, 0x000C, 0x000C, 0x000B, 0x000A, 
	0x0009, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0001, 
	0x0001, 0x0001, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 
	0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000C, 0x000D, 0x000D, 0x000D, 
	0x000C, 0x000C, 0x000B, 0x000A, 0x0009, 0x0007, 0x0006, 0x0005, 0x0004, 
	0x0003, 0x0002, 0x0001, 0xE4FD, 0xE4F9, 0xE4EE, 0xE4DE, 0xE4C8, 0xE4AF, 
	0xE493, 0xE476, 0xE45A, 0xE43E, 0xE425, 0xE40F, 0xE3FE, 0xE3F3, 0xE3EF, 
	0xE3F3, 0xE3FD, 0xE40C, 0xE41F, 0xE435, 0xE44E, 0xE469, 0xE484, 0xE49E, 
	0xE4B7, 0xE4CE, 0xE4E1, 0xE4F0, 0xE4FA, 0xE4FD, 0xE4FA, 0xE4F2, 0xE4E4, 
	0xE4D3, 0xE4BF, 0xE4A8, 0xE490, 0xE476, 0xE45D, 0xE445, 0xE42E, 0xE41A, 
	0xE408, 0xE3FB, 0xE3F2, 0xE3EF, 0xE3F3, 0xE3FD, 0xE40C, 0xE41F, 0xE435, 
	0xE44E, 0xE469, 0xE484, 0xE49E, 0xE4B7, 0xE4CE, 0xE4E1, 0xE4F0, 0xE4FA, 
	0xE4FD, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 
	0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
	0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
	0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
	0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
	0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
	0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xF548, 0xFFFF, 0xFFFF, 0xBF5E, 
	0xD649, 0xD65A, 0xD688, 0xD6CE, 0xD729, 0xD792, 0xD805, 0xD87D, 0xD8F4, 
	0xD967, 0xD9D1, 0xDA2B, 0xDA72, 0xDAA0, 0xDAB0, 0xDAA2, 0xDA79, 0xDA3B, 
	0xD9EA, 0xD98C, 0xD923, 0xD8B5, 0xD844, 0xD7D6, 0xD76D, 0xD70F, 0xD6BE, 
	0xD680, 0xD658, 0xD649, 0xD656, 0xD67A, 0xD6B1, 0xD6F9, 0xD74F, 0xD7AE, 
	0xD813, 0xD87D, 0xD8E6, 0xD94B, 0xD9AB, 0xDA00, 0xDA48, 0xDA80, 0xDAA3, 
	0xDAB0, 0xDAA2, 0xDA79, 0xDA3B, 0xD9EA, 0xD98C, 0xD923, 0xD8B5, 0xD844, 
	0xD7D6, 0xD76D, 0xD70F, 0xD6BE, 0xD680, 0xD658, 0xD649, 0xEC40, 0xEC44, 
	0xEC50, 0xEC62, 0xEC79, 0xEC94, 0xECB2, 0xECD0, 0xECEF, 0xED0C, 0xED27, 
	0xED3E, 0xED50, 0xED5C, 0xED60, 0xED5D, 0xED52, 0xED42, 0xED2E, 0xED16, 
	0xECFB, 0xECDF, 0xECC2, 0xECA6, 0xEC8B, 0xEC73, 0xEC5E, 0xEC4E, 0xEC44, 
	0xEC40, 0xEC43, 0xEC4C, 0xEC5B, 0xEC6D, 0xEC83, 0xEC9B, 0xECB5, 0xECD0, 
	0xECEB, 0xED05, 0xED1E, 0xED33, 0xED46, 0xED54, 0xED5D, 0xED60, 0xED5D, 
	0xED52, 0xED42, 0xED2E, 0xED16, 0xECFB, 0xECDF, 0xECC2, 0xECA6, 0xEC8B, 
	0xEC73, 0xEC5E, 0xEC4E, 0xEC44, 0xEC40, 0xB59D, 0xB596, 0xB581, 0xB561, 
	0xB538, 0xB508, 0xB4D4, 0xB49E, 0xB467, 0xB433, 0xB403, 0xB3DA, 0xB3BA, 
	0xB3A5, 0xB39E, 0xB3A4, 0xB3B7, 0xB3D3, 0xB3F7, 0xB422, 0xB452, 0xB484, 
	0xB4B7, 0xB4E9, 0xB519, 0xB544, 0xB568, 0xB584, 0xB597, 0xB59D, 0xB598, 
	0xB587, 0xB56E, 0xB54D, 0xB527, 0xB4FB, 0xB4CD, 0xB49E, 0xB46E, 0xB440, 
	0xB414, 0xB3EE, 0xB3CD, 0xB3B4, 0xB3A3, 0xB39E, 0xB3A4, 0xB3B7, 0xB3D3, 
	0xB3F7, 0xB422, 0xB452, 0xB484, 0xB4B7, 0xB4E9, 0xB519, 0xB544, 0xB568, 
	0xB584, 0xB597, 0xB59D, 0xFFFF, 0xFFF4, 0xFFD4, 0xFFA4, 0xFF66, 0xFF1E, 
	0xFECF, 0xFE7D, 0xFE2A, 0xFDDB, 0xFD93, 0xFD55, 0xFD25, 0xFD05, 0xFCFA, 
	0xFD04, 0xFD20, 0xFD4A, 0xFD82, 0xFDC2, 0xFE0A, 0xFE56, 0xFEA3, 0xFEEF, 
	0xFF37, 0xFF77, 0xFFAF, 0xFFD9, 0xFFF5, 0xFFFF, 0xFFF6, 0xFFDE, 0xFFB8, 
	0xFF86, 0xFF4C, 0xFF0A, 0xFEC5, 0xFE7D, 0xFE34, 0xFDEF, 0xFDAD, 0xFD73, 
	0xFD41, 0xFD1B, 0xFD03, 0xFCFA, 0xFD04, 0xFD20, 0xFD4A, 0xFD82, 0xFDC2, 
	0xFE0A, 0xFE56, 0xFEA3, 0xFEEF, 0xFF37, 0xFF77, 0xFFAF, 0xFFD9, 0xFFF5, 
	0xFFFF, 0x0000, 0x0004, 0x0011, 0x0024, 0x003C, 0x0058, 0x0076, 0x0096, 
	0x00B6, 0x00D5, 0x00F1, 0x0109, 0x011C, 0x0129, 0x012D, 0x0129, 0x011E, 
	0x010E, 0x00F8, 0x00DF, 0x00C3, 0x00A5, 0x0087, 0x006A, 0x004E, 0x0035, 
	0x001F, 0x000F, 0x0004, 0x0000, 0x0003, 0x000D, 0x001C, 0x002F, 0x0046, 
	0x005F, 0x007A, 0x0096, 0x00B3, 0x00CE, 0x00E7, 0x00FE, 0x0111, 0x0120, 
	0x012A, 0x012D, 0x0129, 0x011E, 0x010E, 0x00F8, 0x00DF, 0x00C3, 0x00A5, 
	0x0087, 0x006A, 0x004E, 0x0035, 0x001F, 0x000F, 0x0004, 0x0000, 0x2537, 
	0x2537, 0x2537, 0x2537, 0x2538, 0x2538, 0x2539, 0x2539, 0x253A, 0x253A, 
	0x253B, 0x253B, 0x253B, 0x253C, 0x253C, 0x253C, 0x253B, 0x253B, 0x253B, 
	0x253A, 0x253A, 0x2539, 0x2539, 0x2539, 0x2538, 0x2538, 0x2537, 0x2537, 
	0x2537, 0x2537, 0x2537, 0x2537, 0x2537, 0x2538, 0x2538, 0x2538, 0x2539, 
	0x2539, 0x253A, 0x253A, 0x253B, 0x253B, 0x253B, 0x253B, 0x253C, 0x253C, 
	0x253C, 0x253B, 0x253B, 0x253B, 0x253A, 0x253A, 0x2539, 0x2539, 0x2539, 
	0x2538, 0x2538, 0x2537, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 
	0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 
	0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
	0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 
	0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
	0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 
	0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
	0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xBF3F, 0xFFFF, 
	0xFFFF, 0xBF5E, 0x1B09, 0x1AF9, 0x1ACE, 0x1A8C, 0x1A37, 0x19D5, 0x1969, 
	0x18F9, 0x1888, 0x181D, 0x17BA, 0x1765, 0x1723, 0x16F8, 0x16E9, 0x16F6, 
	0x171C, 0x1756, 0x17A2, 0x17FA, 0x185C, 0x18C4, 0x192D, 0x1995, 0x19F7, 
	0x1A50, 0x1A9B, 0x1AD6, 0x1AFB, 0x1B09, 0x1AFD, 0x1ADC, 0x1AA7, 0x1A64, 
	0x1A14, 0x19BB, 0x195B, 0x18F9, 0x1896, 0x1837, 0x17DE, 0x178E, 0x174A, 
	0x1716, 0x16F4, 0x16E9, 0x16F6, 0x171C, 0x1756, 0x17A2, 0x17FA, 0x185C, 
	0x18C4, 0x192D, 0x1995, 0x19F7, 0x1A50, 0x1A9B, 0x1AD6, 0x1AFB, 0x1B09, 
	0x1144, 0x113C, 0x1126, 0x1104, 0x10D9, 0x10A7, 0x1070, 0x1037, 0x0FFE, 
	0x0FC7, 0x0F95, 0x0F6A, 0x0F48, 0x0F32, 0x0F2A, 0x0F31, 0x0F45, 0x0F62, 
	0x0F89, 0x0FB6, 0x0FE8, 0x101C, 0x1052, 0x1087, 0x10B9, 0x10E6, 0x110C, 
	0x112A, 0x113D, 0x1144, 0x113E, 0x112D, 0x1112, 0x10F0, 0x10C7, 0x109A, 
	0x1069, 0x1037, 0x1005, 0x0FD4, 0x0FA7, 0x0F7E, 0x0F5C, 0x0F41, 0x0F30, 
	0x0F2A, 0x0F31, 0x0F45, 0x0F62, 0x0F89, 0x0FB6, 0x0FE8, 0x101C, 0x1052, 
	0x1087, 0x10B9, 0x10E6, 0x110C, 0x112A, 0x113D, 0x1144, 0xAC43, 0xAC3D, 
	0xAC2D, 0xAC13, 0xABF2, 0xABCC, 0xABA2, 0xAB76, 0xAB4B, 0xAB21, 0xAAFB, 
	0xAADA, 0xAAC0, 0xAAAF, 0xAAAA, 0xAAAF, 0xAABD, 0xAAD4, 0xAAF1, 0xAB14, 
	0xAB3A, 0xAB62, 0xAB8B, 0xABB3, 0xABD9, 0xABFB, 0xAC19, 0xAC2F, 0xAC3E, 
	0xAC43, 0xAC3F, 0xAC32, 0xAC1E, 0xAC03, 0xABE4, 0xABC2, 0xAB9D, 0xAB76, 
	0xAB50, 0xAB2B, 0xAB09, 0xAAEA, 0xAACF, 0xAABB, 0xAAAE, 0xAAAA, 0xAAAF, 
	0xAABD, 0xAAD4, 0xAAF1, 0xAB14, 0xAB3A, 0xAB62, 0xAB8B, 0xABB3, 0xABD9, 
	0xABFB, 0xAC19, 0xAC2F, 0xAC3E, 0xAC43, 0x0000, 0x000B, 0x002A, 0x005A, 
	0x0097, 0x00DE, 0x012B, 0x017C, 0x01CD, 0x021B, 0x0262, 0x029F, 0x02CE, 
	0x02ED, 0x02F9, 0x02EF, 0x02D4, 0x02A9, 0x0273, 0x0233, 0x01ED, 0x01A2, 
	0x0156, 0x010C, 0x00C5, 0x0085, 0x004F, 0x0025, 0x000A, 0x0000, 0x0009, 
	0x0021, 0x0046, 0x0077, 0x00B0, 0x00F1, 0x0135, 0x017C, 0x01C3, 0x0208, 
	0x0248, 0x0282, 0x02B2, 0x02D8, 0x02F0, 0x02F9, 0x02EF, 0x02D4, 0x02A9, 
	0x0273, 0x0233, 0x01ED, 0x01A2, 0x0156, 0x010C, 0x00C5, 0x0085, 0x004F, 
	0x0025, 0x000A, 0x0000, 0xFFFF, 0xFFFE, 0xFFFA, 0xFFF5, 0xFFEE, 0xFFE6, 
	0xFFDE, 0xFFD5, 0xFFCC, 0xFFC3, 0xFFBB, 0xFFB4, 0xFFAF, 0xFFAB, 0xFFAA, 
	0xFFAB, 0xFFAE, 0xFFB3, 0xFFB9, 0xFFC0, 0xFFC8, 0xFFD0, 0xFFD9, 0xFFE1, 
	0xFFE9, 0xFFF0, 0xFFF6, 0xFFFB, 0xFFFE, 0xFFFF, 0xFFFE, 0xFFFB, 0xFFF7, 
	0xFFF2, 0xFFEB, 0xFFE4, 0xFFDD, 0xFFD5, 0xFFCD, 0xFFC5, 0xFFBE, 0xFFB7, 
	0xFFB2, 0xFFAE, 0xFFAB, 0xFFAA, 0xFFAB, 0xFFAE, 0xFFB3, 0xFFB9, 0xFFC0, 
	0xFFC8, 0xFFD0, 0xFFD9, 0xFFE1, 0xFFE9, 0xFFF0, 0xFFF6, 0xFFFB, 0xFFFE, 
	0xFFFF, 0x1E4A, 0x1E4A, 0x1E4A, 0x1E4A, 0x1E49, 0x1E49, 0x1E49, 0x1E48, 
	0x1E48, 0x1E48, 0x1E47, 0x1E47, 0x1E47, 0x1E47, 0x1E47, 0x1E47, 0x1E47, 
	0x1E47, 0x1E47, 0x1E48, 0x1E48, 0x1E48, 0x1E48, 0x1E49, 0x1E49, 0x1E49, 
	0x1E4A, 0x1E4A, 0x1E4A, 0x1E4A, 0x1E4A, 0x1E4A, 0x1E4A, 0x1E49, 0x1E49, 
	0x1E49, 0x1E49, 0x1E48, 0x1E48, 0x1E48, 0x1E47, 0x1E47, 0x1E47, 0x1E47, 
	0x1E47, 0x1E47, 0x1E47, 0x1E47, 0x1E47, 0x1E47, 0x1E48, 0x1E48, 0x1E48, 
	0x1E48, 0x1E49, 0x1E49, 0x1E49, 0x1E4A, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
	0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 
	0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 
	0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 
	0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
	0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFF2F, 
	0xC9D7, 

},{ 
	0x0001, 0x0000, 0x0001, 0x0001, 0x0001, 0x0002, 0x0001, 0x0003, 0x0001, 
	0x0004, 0x0001, 0x0005, 0x0001, 0x0006, 0x0001, 0x0007, 0x0001, 0x0008, 
	0x0012, 0x0009, 0x0001, 0x001B, 0x003D, 0x001C, 0x003D, 0x0059, 0x003D, 
	0x0096, 0x003C, 0x00D3, 0x0001, 0x010F, 0x0001, 0x0110, 0x0001, 0x0111, 
	0x003D, 0x0112, 0x003C, 0x014F, 0x003D, 0x018B, 0x003C, 0x01C8, 0x003B, 
	0x0204, 0x003D, 0x023F, 0x003C, 0x027C, 0x0001, 0x02B8, 0x0001, 0x02B9, 
	0x0001, 0x02BA, 0x0001, 0x02BB, 0x0001, 0x02BC, 0x003D, 0x02BD, 0x003C, 
	0x02FA, 0x003D, 0x0336, 0x003C, 0x0373, 0x003B, 0x03AF, 0x003D, 0x03EA, 
	0x003C, 0x0427, 0x003D, 0x0463, 0x0001, 0x04A0, 0x0001, 0x04A1, 0x0001, 
	0x04A2, 0x0001, 0x04A3, 0x003D, 0x04A4, 0x003D, 0x04E1, 0x003D, 0x051E, 
	0x003D, 0x055B, 0x003D, 0x0598, 0x003A, 0x05D5, 0x003D, 0x060F, 0x003C, 
	0x064C, 0x0001, 0x0688, 0x0001, 0x0689, 0x0001, 0x068A, 0x0001, 0x068B, 
	0x003D, 0x068C, 0x003D, 0x06C9, 0x003D, 0x0706, 0x003D, 0x0743, 0x003D, 
	0x0780, 0x003A, 0x07BD, 0x0039, 0x07F7, 0x0001, 0x0830, 0x0001, 0x0831, 
	

});


-------------------------------------------- Reading Map ACTion ------------------------------------------

ACT_READING_MAP = allocate_mario_action(ACT_GROUP_STATIONARY | ACT_FLAG_STATIONARY)

hook_mario_action(ACT_READING_MAP, function(m)
    -- animation and staying intangible
    smlua_anim_util_set_animation(m.marioObj, "reading_map")
    m.marioObj.header.gfx.animInfo.animAccel = 0x10000
    m.marioObj.oIntangibleTimer = -1

    -- no MOVING
    m.controller.stickX = 0
    m.controller.stickY = 0

	
	local s = gPlayerSyncTable[m.playerIndex]
	

 if m.floor ~= nil and m.vel.y <= 0 and m.pos.y <= m.floorHeight + 10 then
        perform_ground_step(m)
    else
        -- close map if you FALL
        perform_air_step(m, 0)
        s.mapOpen = false
        set_mario_action(m, ACT_FREEFALL, 0)
        m.marioObj.oIntangibleTimer = 0
        set_character_anim_with_accel(m, CHAR_ANIM_STOP_REACH_POCKET, 0)
        play_sound(SOUND_MENU_CLICK_FILE_SELECT, m.pos)
        return 0
    end

    return 0
end)


